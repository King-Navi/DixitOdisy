name: SonarQube
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    runs-on: windows-latest
    steps:
      # 1. Configurar JDK para SonarScanner
      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: zulu

      # 2. Clonar el repositorio
      - name: Checkout code
        uses: actions/checkout@v3

      # 3. Restaurar paquetes NuGet
      - name: Restore NuGet packages
        run: dotnet restore DixitOdisy.sln

      # 4. Instalar herramientas WCF (opcional)
      - name: Install WCF Tools
        run: |
          choco install visualstudio2019buildtools --package-parameters "--add Microsoft.VisualStudio.Component.Wcf.Tooling"

      # 5. Instalar SonarScanner globalmente
      - name: Install SonarQube Scanner
        run: dotnet tool install --global dotnet-sonarscanner

      # 6. Iniciar el análisis con SonarScanner
      - name: SonarQube Begin Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet-sonarscanner begin /k:"King-Navi_DixitOdisy" /o:"naviking" /d:sonar.host.url="https://sonarcloud.io"

      # 7. Construir la solución
      - name: Build the Solution
        run: dotnet build DixitOdisy.sln --property:Platform=x64

      # 8. Finalizar el análisis con SonarScanner
      - name: SonarQube End Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet-sonarscanner end
