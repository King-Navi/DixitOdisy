name: SonarQube 
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    runs-on: windows-latest
    steps:
      # 1. Configurar JDK para SonarScanner
      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: zulu

      # 2. Clonar el repositorio
      - name: Checkout code
        uses: actions/checkout@v3

      # 3. Instalar NuGet
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1

      # 4. Restaurar paquetes NuGet
      - name: Restore NuGet packages
        run: nuget restore DixitOdisy.sln

      # 5. Instalar herramientas WCF
      - name: Install Visual Studio Build Tools with WCF
        run: |
          choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Component.Wcf.Tooling --includeRecommended --passive --norestart"

      # 6. Instalar SonarScanner globalmente
      - name: Install SonarQube Scanner
        run: dotnet tool install --global dotnet-sonarscanner

      # 7. Iniciar el análisis con SonarScanner
      - name: SonarQube Begin Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet-sonarscanner begin /k:"King-Navi_DixitOdisy" /o:"naviking" /d:sonar.host.url="https://sonarcloud.io"

      # 8. Construir la solución usando msbuild
      - name: Build the Solution
        run: msbuild DixitOdisy.sln /p:Configuration=Debug /p:Platform="Any CPU"

      # 9. Finalizar el análisis con SonarScanner
      - name: SonarQube End Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet-sonarscanner end
